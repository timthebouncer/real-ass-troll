---
import { Image } from 'astro:assets';
import Button from '~/components/ui/Button.astro';

interface Props {
  carousel: {
    id: number;
    img: ImageMetadata;
    bg: string;
  }[];
}
const { carousel } = Astro.props;
---

<style>
  .carousel-item {
    transition: opacity 0.5s ease-in-out;
    opacity: 0;
    position: absolute;
    width: 100%;
  }

  .carousel-item.active {
    opacity: 1;
  }
</style>

<div class="relative h-[calc(100vh-60px)] w-full overflow-hidden">
  <div class="absolute top-1/2 left-4 z-10 -translate-y-1/2">
    <Button icon="left-arrow" class="text-3xl" id="data-carousel-prev" />
  </div>

  <div class="absolute top-1/2 right-4 z-10 -translate-y-1/2">
    <Button icon="right-arrow" class="text-3xl" id="data-carousel-next" />
  </div>

  {
    carousel.map((item) => {
      return (
        <div
          class={`
            w-full h-full flex justify-center items-center ${item.bg}
            transition-all duration-500 ease-in-out pointer-events-none
            absolute inset-0
            ${item.id === 1 ? 'opacity-100 pointer-events-auto' : 'opacity-0 pointer-events-none'}
          `}
          data-carousel-item
          data-carousel-id={item.id}
          onclick={() => {
            console.log('clicked');
          }}
        >
          <div class="w-full h-full max-w-7xl mx-auto px-4">
            <Image
              src={item.img}
              alt={`Carousel image ${item.id}`}
              class="w-full h-full object-contain"
              draggable="false"
            />
          </div>
        </div>
      );
    })
  }

  <div class="absolute bottom-4 left-0 right-0 flex justify-center items-center gap-2">
    {
      carousel.map((item) => (
        <button
          class="w-3 h-3 rounded-full bg-white border-none hover:bg-white"
          data-carousel-dot
          data-carousel-id={item.id}
        />
      ))
    }
  </div>
</div>

<script define:vars={{ carousel }}>
  document.addEventListener('DOMContentLoaded', () => {
    let currentId = 1;
    const items = document.querySelectorAll('[data-carousel-item]');
    const dots = document.querySelectorAll('[data-carousel-dot]');
    const prevButton = document.getElementById('data-carousel-prev');
    const nextButton = document.getElementById('data-carousel-next');

    let isDragging = false;
    let startPos = 0;

    items.forEach((item) => {
      item.addEventListener('touchstart', dragStart);
      item.addEventListener('touchend', dragEnd);

      item.addEventListener('mousedown', dragStart);
      item.addEventListener('mouseup', dragEnd);
      item.addEventListener('mousemove', drag);
    });

    function dragStart(event) {
      isDragging = true;
      startPos = getPositionX(event);
    }

    function drag(event) {
      if (isDragging) {
        const currentPosition = getPositionX(event);
        const diff = currentPosition - startPos;

        if (Math.abs(diff) > 100) {
          if (diff > 0) {
            currentId = currentId === 1 ? carousel.length : currentId - 1;
          } else {
            currentId = currentId === carousel.length ? 1 : currentId + 1;
          }
          showSlide(currentId);
          dragEnd();
        }
      }
    }

    function dragEnd() {
      isDragging = false;
    }

    function getPositionX(event) {
      return event.type.includes('mouse') ? event.pageX : event.touches[0].clientX;
    }

    function showSlide(id) {
      items.forEach((item) => {
        const itemId = Number(item.getAttribute('data-carousel-id'));
        if (itemId === id) {
          item.classList.remove('opacity-0', 'pointer-events-none');
        } else {
          item.classList.add('opacity-0', 'pointer-events-none');
        }
      });

      dots.forEach((dot) => {
        const dotId = Number(dot.getAttribute('data-carousel-id'));
        if (dotId === id) {
          dot.classList.add('bg-white');
          dot.classList.remove('bg-white/50');
        } else {
          dot.classList.remove('bg-white');
          dot.classList.add('bg-white/50');
        }
      });
    }

    showSlide(currentId);
    console.log('Initial slide shown:', currentId);

    prevButton?.addEventListener('mousedown', (event) => {
      event.preventDefault();
      currentId = currentId === 1 ? carousel.length : currentId - 1;
      showSlide(currentId);
    });

    nextButton?.addEventListener('mousedown', (event) => {
      event.preventDefault();
      currentId = currentId === carousel.length ? 1 : currentId + 1;
      showSlide(currentId);
    });

    dots.forEach((dot) => {
      dot.addEventListener('click', () => {
        const id = Number(dot.getAttribute('data-carousel-id'));
        currentId = id;
        showSlide(currentId);
      });
    });
  });
</script>
